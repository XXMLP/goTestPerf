// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stee_checkmgr.proto

package mobile

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RiskType int32

const (
	RiskType_RiskType_Inject        RiskType = 101
	RiskType_RiskType_Hook          RiskType = 102
	RiskType_RiskType_Root          RiskType = 103
	RiskType_RiskType_DumpMem       RiskType = 104
	RiskType_RiskType_Emulator      RiskType = 105
	RiskType_RiskType_Debug         RiskType = 106
	RiskType_RiskType_Repackage     RiskType = 107
	RiskType_RiskType_MultiLaunch   RiskType = 108
	RiskType_RiskType_RiskApp       RiskType = 109
	RiskType_RiskType_RiskProcess   RiskType = 110
	RiskType_RiskType_FileSafety    RiskType = 111
	RiskType_RiskType_SELinux       RiskType = 112
	RiskType_RiskType_SystemBug     RiskType = 113
	RiskType_RiskType_Env_Change    RiskType = 114
	RiskType_RiskType_Time_Out_Sync RiskType = 115
	RiskType_RiskType_Master_Key    RiskType = 116
	RiskType_RiskType_Jailbreak     RiskType = 117
	RiskType_RiskType_Proxy         RiskType = 118
)

var RiskType_name = map[int32]string{
	101: "RiskType_Inject",
	102: "RiskType_Hook",
	103: "RiskType_Root",
	104: "RiskType_DumpMem",
	105: "RiskType_Emulator",
	106: "RiskType_Debug",
	107: "RiskType_Repackage",
	108: "RiskType_MultiLaunch",
	109: "RiskType_RiskApp",
	110: "RiskType_RiskProcess",
	111: "RiskType_FileSafety",
	112: "RiskType_SELinux",
	113: "RiskType_SystemBug",
	114: "RiskType_Env_Change",
	115: "RiskType_Time_Out_Sync",
	116: "RiskType_Master_Key",
	117: "RiskType_Jailbreak",
	118: "RiskType_Proxy",
}

var RiskType_value = map[string]int32{
	"RiskType_Inject":        101,
	"RiskType_Hook":          102,
	"RiskType_Root":          103,
	"RiskType_DumpMem":       104,
	"RiskType_Emulator":      105,
	"RiskType_Debug":         106,
	"RiskType_Repackage":     107,
	"RiskType_MultiLaunch":   108,
	"RiskType_RiskApp":       109,
	"RiskType_RiskProcess":   110,
	"RiskType_FileSafety":    111,
	"RiskType_SELinux":       112,
	"RiskType_SystemBug":     113,
	"RiskType_Env_Change":    114,
	"RiskType_Time_Out_Sync": 115,
	"RiskType_Master_Key":    116,
	"RiskType_Jailbreak":     117,
	"RiskType_Proxy":         118,
}

func (x RiskType) Enum() *RiskType {
	p := new(RiskType)
	*p = x
	return p
}

func (x RiskType) String() string {
	return proto.EnumName(RiskType_name, int32(x))
}

func (x *RiskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RiskType_value, data, "RiskType")
	if err != nil {
		return err
	}
	*x = RiskType(value)
	return nil
}

func (RiskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{0}
}

type STEEModule struct {
	Name                 *string    `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Version              *string    `protobuf:"bytes,2,req,name=version" json:"version,omitempty"`
	InstanceId           *uint64    `protobuf:"varint,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	DownloadTime         *Timestamp `protobuf:"bytes,4,opt,name=download_time,json=downloadTime" json:"download_time,omitempty"`
	AssignId             *uint64    `protobuf:"varint,5,opt,name=assign_id,json=assignId" json:"assign_id,omitempty"`
	Sha1                 []byte     `protobuf:"bytes,6,opt,name=sha1" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *STEEModule) Reset()         { *m = STEEModule{} }
func (m *STEEModule) String() string { return proto.CompactTextString(m) }
func (*STEEModule) ProtoMessage()    {}
func (*STEEModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{0}
}

func (m *STEEModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STEEModule.Unmarshal(m, b)
}
func (m *STEEModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STEEModule.Marshal(b, m, deterministic)
}
func (m *STEEModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STEEModule.Merge(m, src)
}
func (m *STEEModule) XXX_Size() int {
	return xxx_messageInfo_STEEModule.Size(m)
}
func (m *STEEModule) XXX_DiscardUnknown() {
	xxx_messageInfo_STEEModule.DiscardUnknown(m)
}

var xxx_messageInfo_STEEModule proto.InternalMessageInfo

func (m *STEEModule) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *STEEModule) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *STEEModule) GetInstanceId() uint64 {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return 0
}

func (m *STEEModule) GetDownloadTime() *Timestamp {
	if m != nil {
		return m.DownloadTime
	}
	return nil
}

func (m *STEEModule) GetAssignId() uint64 {
	if m != nil && m.AssignId != nil {
		return *m.AssignId
	}
	return 0
}

func (m *STEEModule) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type STEERisk struct {
	When                 *Timestamp `protobuf:"bytes,1,req,name=when" json:"when,omitempty"`
	Type                 *RiskType  `protobuf:"varint,2,req,name=type,enum=com.dingxiang.mobile.RiskType" json:"type,omitempty"`
	Extra                *string    `protobuf:"bytes,3,opt,name=extra" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *STEERisk) Reset()         { *m = STEERisk{} }
func (m *STEERisk) String() string { return proto.CompactTextString(m) }
func (*STEERisk) ProtoMessage()    {}
func (*STEERisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{1}
}

func (m *STEERisk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STEERisk.Unmarshal(m, b)
}
func (m *STEERisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STEERisk.Marshal(b, m, deterministic)
}
func (m *STEERisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STEERisk.Merge(m, src)
}
func (m *STEERisk) XXX_Size() int {
	return xxx_messageInfo_STEERisk.Size(m)
}
func (m *STEERisk) XXX_DiscardUnknown() {
	xxx_messageInfo_STEERisk.DiscardUnknown(m)
}

var xxx_messageInfo_STEERisk proto.InternalMessageInfo

func (m *STEERisk) GetWhen() *Timestamp {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *STEERisk) GetType() RiskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RiskType_RiskType_Inject
}

func (m *STEERisk) GetExtra() string {
	if m != nil && m.Extra != nil {
		return *m.Extra
	}
	return ""
}

type STEECheckMgrCheckRequest struct {
	ClientTime           *Timestamp    `protobuf:"bytes,1,req,name=client_time,json=clientTime" json:"client_time,omitempty"`
	InstallId            *uint64       `protobuf:"varint,2,opt,name=install_id,json=installId" json:"install_id,omitempty"`
	Tdb                  *string       `protobuf:"bytes,3,opt,name=tdb" json:"tdb,omitempty"`
	LocalModules         []*STEEModule `protobuf:"bytes,4,rep,name=local_modules,json=localModules" json:"local_modules,omitempty"`
	Risks                []*STEERisk   `protobuf:"bytes,5,rep,name=risks" json:"risks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *STEECheckMgrCheckRequest) Reset()         { *m = STEECheckMgrCheckRequest{} }
func (m *STEECheckMgrCheckRequest) String() string { return proto.CompactTextString(m) }
func (*STEECheckMgrCheckRequest) ProtoMessage()    {}
func (*STEECheckMgrCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{2}
}

func (m *STEECheckMgrCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STEECheckMgrCheckRequest.Unmarshal(m, b)
}
func (m *STEECheckMgrCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STEECheckMgrCheckRequest.Marshal(b, m, deterministic)
}
func (m *STEECheckMgrCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STEECheckMgrCheckRequest.Merge(m, src)
}
func (m *STEECheckMgrCheckRequest) XXX_Size() int {
	return xxx_messageInfo_STEECheckMgrCheckRequest.Size(m)
}
func (m *STEECheckMgrCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_STEECheckMgrCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_STEECheckMgrCheckRequest proto.InternalMessageInfo

func (m *STEECheckMgrCheckRequest) GetClientTime() *Timestamp {
	if m != nil {
		return m.ClientTime
	}
	return nil
}

func (m *STEECheckMgrCheckRequest) GetInstallId() uint64 {
	if m != nil && m.InstallId != nil {
		return *m.InstallId
	}
	return 0
}

func (m *STEECheckMgrCheckRequest) GetTdb() string {
	if m != nil && m.Tdb != nil {
		return *m.Tdb
	}
	return ""
}

func (m *STEECheckMgrCheckRequest) GetLocalModules() []*STEEModule {
	if m != nil {
		return m.LocalModules
	}
	return nil
}

func (m *STEECheckMgrCheckRequest) GetRisks() []*STEERisk {
	if m != nil {
		return m.Risks
	}
	return nil
}

type STEECheckMgrCheckResponse struct {
	InstallId            *uint64       `protobuf:"varint,1,opt,name=install_id,json=installId" json:"install_id,omitempty"`
	RecordModules        []*STEEModule `protobuf:"bytes,2,rep,name=record_modules,json=recordModules" json:"record_modules,omitempty"`
	DownloadModules      []*STEEModule `protobuf:"bytes,3,rep,name=download_modules,json=downloadModules" json:"download_modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *STEECheckMgrCheckResponse) Reset()         { *m = STEECheckMgrCheckResponse{} }
func (m *STEECheckMgrCheckResponse) String() string { return proto.CompactTextString(m) }
func (*STEECheckMgrCheckResponse) ProtoMessage()    {}
func (*STEECheckMgrCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{3}
}

func (m *STEECheckMgrCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STEECheckMgrCheckResponse.Unmarshal(m, b)
}
func (m *STEECheckMgrCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STEECheckMgrCheckResponse.Marshal(b, m, deterministic)
}
func (m *STEECheckMgrCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STEECheckMgrCheckResponse.Merge(m, src)
}
func (m *STEECheckMgrCheckResponse) XXX_Size() int {
	return xxx_messageInfo_STEECheckMgrCheckResponse.Size(m)
}
func (m *STEECheckMgrCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_STEECheckMgrCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_STEECheckMgrCheckResponse proto.InternalMessageInfo

func (m *STEECheckMgrCheckResponse) GetInstallId() uint64 {
	if m != nil && m.InstallId != nil {
		return *m.InstallId
	}
	return 0
}

func (m *STEECheckMgrCheckResponse) GetRecordModules() []*STEEModule {
	if m != nil {
		return m.RecordModules
	}
	return nil
}

func (m *STEECheckMgrCheckResponse) GetDownloadModules() []*STEEModule {
	if m != nil {
		return m.DownloadModules
	}
	return nil
}

type STEEModuleWithPath struct {
	Mod                  *STEEModule `protobuf:"bytes,1,req,name=mod" json:"mod,omitempty"`
	Path                 *string     `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *STEEModuleWithPath) Reset()         { *m = STEEModuleWithPath{} }
func (m *STEEModuleWithPath) String() string { return proto.CompactTextString(m) }
func (*STEEModuleWithPath) ProtoMessage()    {}
func (*STEEModuleWithPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{4}
}

func (m *STEEModuleWithPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STEEModuleWithPath.Unmarshal(m, b)
}
func (m *STEEModuleWithPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STEEModuleWithPath.Marshal(b, m, deterministic)
}
func (m *STEEModuleWithPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STEEModuleWithPath.Merge(m, src)
}
func (m *STEEModuleWithPath) XXX_Size() int {
	return xxx_messageInfo_STEEModuleWithPath.Size(m)
}
func (m *STEEModuleWithPath) XXX_DiscardUnknown() {
	xxx_messageInfo_STEEModuleWithPath.DiscardUnknown(m)
}

var xxx_messageInfo_STEEModuleWithPath proto.InternalMessageInfo

func (m *STEEModuleWithPath) GetMod() *STEEModule {
	if m != nil {
		return m.Mod
	}
	return nil
}

func (m *STEEModuleWithPath) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type STEEModuleFile struct {
	Modules              []*STEEModuleWithPath `protobuf:"bytes,1,rep,name=modules" json:"modules,omitempty"`
	InstallId            *uint64               `protobuf:"varint,2,opt,name=install_id,json=installId" json:"install_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *STEEModuleFile) Reset()         { *m = STEEModuleFile{} }
func (m *STEEModuleFile) String() string { return proto.CompactTextString(m) }
func (*STEEModuleFile) ProtoMessage()    {}
func (*STEEModuleFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1509663635666327, []int{5}
}

func (m *STEEModuleFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STEEModuleFile.Unmarshal(m, b)
}
func (m *STEEModuleFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STEEModuleFile.Marshal(b, m, deterministic)
}
func (m *STEEModuleFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STEEModuleFile.Merge(m, src)
}
func (m *STEEModuleFile) XXX_Size() int {
	return xxx_messageInfo_STEEModuleFile.Size(m)
}
func (m *STEEModuleFile) XXX_DiscardUnknown() {
	xxx_messageInfo_STEEModuleFile.DiscardUnknown(m)
}

var xxx_messageInfo_STEEModuleFile proto.InternalMessageInfo

func (m *STEEModuleFile) GetModules() []*STEEModuleWithPath {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *STEEModuleFile) GetInstallId() uint64 {
	if m != nil && m.InstallId != nil {
		return *m.InstallId
	}
	return 0
}

func init() {
	proto.RegisterEnum("com.dingxiang.mobile.RiskType", RiskType_name, RiskType_value)
	proto.RegisterType((*STEEModule)(nil), "com.dingxiang.mobile.STEEModule")
	proto.RegisterType((*STEERisk)(nil), "com.dingxiang.mobile.STEERisk")
	proto.RegisterType((*STEECheckMgrCheckRequest)(nil), "com.dingxiang.mobile.STEECheckMgrCheckRequest")
	proto.RegisterType((*STEECheckMgrCheckResponse)(nil), "com.dingxiang.mobile.STEECheckMgrCheckResponse")
	proto.RegisterType((*STEEModuleWithPath)(nil), "com.dingxiang.mobile.STEEModuleWithPath")
	proto.RegisterType((*STEEModuleFile)(nil), "com.dingxiang.mobile.STEEModuleFile")
}

func init() { proto.RegisterFile("stee_checkmgr.proto", fileDescriptor_1509663635666327) }

var fileDescriptor_1509663635666327 = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x8e, 0xdb, 0x36,
	0x10, 0x86, 0xfc, 0xd3, 0xac, 0xc7, 0x6b, 0x2f, 0xc3, 0x75, 0x53, 0x35, 0x45, 0x13, 0xc3, 0x4f,
	0x46, 0x1f, 0x0c, 0xd4, 0xed, 0x01, 0xda, 0x4d, 0xdc, 0xc6, 0x4d, 0x8c, 0x2e, 0xe4, 0x05, 0xfa,
	0x52, 0x40, 0xa0, 0xa5, 0x89, 0xc4, 0x58, 0x22, 0x15, 0x91, 0xda, 0xd8, 0x47, 0x68, 0x6f, 0xd2,
	0xdb, 0x14, 0x3d, 0x51, 0x41, 0xca, 0x92, 0xa1, 0x85, 0x83, 0xf5, 0x93, 0x86, 0x1f, 0xe7, 0x9b,
	0xf9, 0xe6, 0xe3, 0x08, 0xae, 0x95, 0x46, 0xf4, 0x83, 0x18, 0x83, 0x6d, 0x1a, 0xe5, 0xb3, 0x2c,
	0x97, 0x5a, 0xd2, 0x51, 0x20, 0xd3, 0x59, 0xc8, 0x45, 0xb4, 0xe3, 0x4c, 0x44, 0xb3, 0x54, 0x6e,
	0x78, 0x82, 0xcf, 0xaf, 0x6c, 0xea, 0x86, 0x29, 0x2c, 0xd3, 0x26, 0xff, 0x39, 0x00, 0xeb, 0xbb,
	0xc5, 0x62, 0x25, 0xc3, 0x22, 0x41, 0x4a, 0xa1, 0x23, 0x58, 0x8a, 0xae, 0x33, 0x6e, 0x4d, 0x7b,
	0x9e, 0x8d, 0xa9, 0x0b, 0x4f, 0xee, 0x31, 0x57, 0x5c, 0x0a, 0xb7, 0x65, 0xe1, 0xea, 0x48, 0x5f,
	0x42, 0x9f, 0x0b, 0xa5, 0x99, 0x08, 0xd0, 0xe7, 0xa1, 0xdb, 0x1e, 0x3b, 0xd3, 0x8e, 0x07, 0x15,
	0xb4, 0x0c, 0xe9, 0x6b, 0x18, 0x84, 0xf2, 0x93, 0x48, 0x24, 0x0b, 0x7d, 0xcd, 0x53, 0x74, 0x3b,
	0x63, 0x67, 0xda, 0x9f, 0xbf, 0x9c, 0x9d, 0x12, 0x37, 0xbb, 0xe3, 0x29, 0x2a, 0xcd, 0xd2, 0xcc,
	0xbb, 0xac, 0x58, 0x06, 0xa2, 0xdf, 0x40, 0x8f, 0x29, 0xc5, 0x23, 0x61, 0x9a, 0x74, 0x6d, 0x93,
	0x8b, 0x12, 0x58, 0x86, 0x46, 0xb1, 0x8a, 0xd9, 0xf7, 0xee, 0x17, 0x63, 0x67, 0x7a, 0xe9, 0xd9,
	0x78, 0xf2, 0x97, 0x03, 0x17, 0x66, 0x28, 0x8f, 0xab, 0x2d, 0xfd, 0x01, 0x3a, 0x9f, 0x62, 0x14,
	0x76, 0xa4, 0x33, 0x5a, 0xdb, 0x64, 0x3a, 0x87, 0x8e, 0xde, 0x67, 0x68, 0x07, 0x1e, 0xce, 0x5f,
	0x9c, 0x26, 0x99, 0xf2, 0x77, 0xfb, 0x0c, 0x3d, 0x9b, 0x4b, 0x47, 0xd0, 0xc5, 0x9d, 0xce, 0x99,
	0xf5, 0xa1, 0xe7, 0x95, 0x87, 0xc9, 0xdf, 0x2d, 0x70, 0x8d, 0x96, 0x57, 0xe6, 0x79, 0x56, 0x51,
	0x6e, 0xbf, 0x1e, 0x7e, 0x2c, 0x50, 0x69, 0xfa, 0x13, 0xf4, 0x83, 0x84, 0xa3, 0xd0, 0xa5, 0x3b,
	0x67, 0x4a, 0x84, 0x92, 0x63, 0xbd, 0xf9, 0x16, 0x4a, 0xbf, 0x93, 0xc4, 0x98, 0xd3, 0xb2, 0xe6,
	0xf4, 0x0e, 0xc8, 0x32, 0xa4, 0x04, 0xda, 0x3a, 0xdc, 0x1c, 0x14, 0x99, 0x90, 0x2e, 0x60, 0x90,
	0xc8, 0x80, 0x25, 0x7e, 0x6a, 0x5f, 0x5c, 0xb9, 0x9d, 0x71, 0x7b, 0xda, 0x9f, 0x8f, 0x4f, 0x37,
	0x3d, 0xae, 0x86, 0x77, 0x69, 0x69, 0xe5, 0x41, 0xd1, 0x1f, 0xa1, 0x9b, 0x73, 0xb5, 0x55, 0x6e,
	0xd7, 0xd2, 0x5f, 0x7c, 0x9e, 0x6e, 0x5c, 0xf2, 0xca, 0xe4, 0xc9, 0xbf, 0x0e, 0x7c, 0x7d, 0xc2,
	0x0c, 0x95, 0x49, 0xa1, 0x1e, 0xce, 0xe2, 0x3c, 0x9c, 0xe5, 0x57, 0x18, 0xe6, 0x18, 0xc8, 0x3c,
	0xac, 0xa5, 0xb7, 0xce, 0x94, 0x3e, 0x28, 0x79, 0x95, 0xf6, 0xb7, 0x40, 0xea, 0xad, 0xac, 0x4a,
	0xb5, 0xcf, 0x2c, 0x75, 0x55, 0x31, 0x0f, 0xc5, 0x26, 0x7f, 0x02, 0x3d, 0x5e, 0xff, 0xc1, 0x75,
	0x7c, 0xcb, 0x74, 0x4c, 0xe7, 0xd0, 0x4e, 0x65, 0x78, 0x78, 0xd0, 0xc7, 0xab, 0x9a, 0x64, 0xb3,
	0xc9, 0x19, 0xd3, 0xb1, 0x7d, 0xc4, 0x9e, 0x67, 0xe3, 0x89, 0x82, 0xe1, 0x31, 0xed, 0x17, 0x9e,
	0x20, 0xbd, 0x81, 0x27, 0x95, 0x66, 0xc7, 0x6a, 0x9e, 0x3e, 0x56, 0xbd, 0x12, 0xe5, 0x55, 0xc4,
	0x47, 0x96, 0xe6, 0xbb, 0x7f, 0xda, 0x70, 0x51, 0xed, 0x36, 0xbd, 0x86, 0xab, 0x2a, 0xf6, 0x97,
	0xe2, 0x03, 0x06, 0x9a, 0x20, 0x7d, 0x0a, 0x83, 0x1a, 0x7c, 0x23, 0xe5, 0x96, 0xbc, 0x6f, 0x40,
	0x9e, 0x94, 0x9a, 0x44, 0x74, 0x04, 0xa4, 0x86, 0x5e, 0x17, 0x69, 0xb6, 0xc2, 0x94, 0xc4, 0xf4,
	0x4b, 0x78, 0x5a, 0xa3, 0x8b, 0xb4, 0x48, 0x98, 0x96, 0x39, 0xe1, 0x94, 0xc2, 0xf0, 0x98, 0x8c,
	0x9b, 0x22, 0x22, 0x1f, 0xe8, 0x33, 0xa0, 0xc7, 0x9a, 0x98, 0xb1, 0x60, 0xcb, 0x22, 0x24, 0x5b,
	0xea, 0xc2, 0xa8, 0xc6, 0x57, 0x45, 0xa2, 0xf9, 0x3b, 0x56, 0x88, 0x20, 0x26, 0x49, 0xa3, 0xa5,
	0x09, 0x7e, 0xce, 0x32, 0x92, 0x36, 0xf2, 0x4d, 0x70, 0x9b, 0xcb, 0x00, 0x95, 0x22, 0x82, 0x7e,
	0x05, 0xd7, 0xf5, 0x8d, 0xb1, 0x77, 0xcd, 0xde, 0xa3, 0xde, 0x13, 0xd9, 0x28, 0xb4, 0x5e, 0xbc,
	0xe3, 0xa2, 0xd8, 0x91, 0xac, 0x21, 0x68, 0xbd, 0x57, 0x1a, 0xd3, 0x9b, 0x22, 0x22, 0x1f, 0x1b,
	0x65, 0x16, 0xe2, 0xde, 0x7f, 0x15, 0x33, 0x11, 0x21, 0xc9, 0xe9, 0x73, 0x78, 0x56, 0x5f, 0x98,
	0xff, 0xd5, 0xff, 0xbd, 0xd0, 0xfe, 0x7a, 0x2f, 0x02, 0xa2, 0x1a, 0xa4, 0x15, 0x53, 0x1a, 0x73,
	0xff, 0x2d, 0xee, 0x89, 0x6e, 0x74, 0xf9, 0x8d, 0xf1, 0x64, 0x93, 0x23, 0xdb, 0x92, 0xa2, 0x61,
	0xd1, 0x6d, 0x2e, 0x77, 0x7b, 0x72, 0x7f, 0xd3, 0x7a, 0xd3, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0xa9, 0x41, 0xe6, 0xd4, 0x00, 0x06, 0x00, 0x00,
}
