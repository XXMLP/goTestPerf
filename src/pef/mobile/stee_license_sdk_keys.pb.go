// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stee_license_sdk_keys.proto

package mobile

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type License_Branch int32

const (
	License_TRAIL License_Branch = 0
	License_PROD  License_Branch = 1
	License_DEV   License_Branch = 2
)

var License_Branch_name = map[int32]string{
	0: "TRAIL",
	1: "PROD",
	2: "DEV",
}

var License_Branch_value = map[string]int32{
	"TRAIL": 0,
	"PROD":  1,
	"DEV":   2,
}

func (x License_Branch) Enum() *License_Branch {
	p := new(License_Branch)
	*p = x
	return p
}

func (x License_Branch) String() string {
	return proto.EnumName(License_Branch_name, int32(x))
}

func (x *License_Branch) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(License_Branch_value, data, "License_Branch")
	if err != nil {
		return err
	}
	*x = License_Branch(value)
	return nil
}

func (License_Branch) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{0, 0}
}

type License_AntiFlag int32

const (
	License_ANTI_debug     License_AntiFlag = 1
	License_ANTI_emulator  License_AntiFlag = 2
	License_ANTI_hook      License_AntiFlag = 4
	License_ANTI_multirun  License_AntiFlag = 8
	License_ANTI_inject    License_AntiFlag = 16
	License_ANTI_memdump   License_AntiFlag = 32
	License_ANTI_jailbreak License_AntiFlag = 64
	License_ANTI_proxy     License_AntiFlag = 128
	License_ANTI_all       License_AntiFlag = 65535
)

var License_AntiFlag_name = map[int32]string{
	1:     "ANTI_debug",
	2:     "ANTI_emulator",
	4:     "ANTI_hook",
	8:     "ANTI_multirun",
	16:    "ANTI_inject",
	32:    "ANTI_memdump",
	64:    "ANTI_jailbreak",
	128:   "ANTI_proxy",
	65535: "ANTI_all",
}

var License_AntiFlag_value = map[string]int32{
	"ANTI_debug":     1,
	"ANTI_emulator":  2,
	"ANTI_hook":      4,
	"ANTI_multirun":  8,
	"ANTI_inject":    16,
	"ANTI_memdump":   32,
	"ANTI_jailbreak": 64,
	"ANTI_proxy":     128,
	"ANTI_all":       65535,
}

func (x License_AntiFlag) Enum() *License_AntiFlag {
	p := new(License_AntiFlag)
	*p = x
	return p
}

func (x License_AntiFlag) String() string {
	return proto.EnumName(License_AntiFlag_name, int32(x))
}

func (x *License_AntiFlag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(License_AntiFlag_value, data, "License_AntiFlag")
	if err != nil {
		return err
	}
	*x = License_AntiFlag(value)
	return nil
}

func (License_AntiFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{0, 1}
}

type Key_Flags int32

const (
	Key_SIGN    Key_Flags = 1
	Key_VERIFY  Key_Flags = 2
	Key_ENCRYPT Key_Flags = 4
	Key_DECRYPT Key_Flags = 8
	Key_ALL     Key_Flags = 65535
)

var Key_Flags_name = map[int32]string{
	1:     "SIGN",
	2:     "VERIFY",
	4:     "ENCRYPT",
	8:     "DECRYPT",
	65535: "ALL",
}

var Key_Flags_value = map[string]int32{
	"SIGN":    1,
	"VERIFY":  2,
	"ENCRYPT": 4,
	"DECRYPT": 8,
	"ALL":     65535,
}

func (x Key_Flags) Enum() *Key_Flags {
	p := new(Key_Flags)
	*p = x
	return p
}

func (x Key_Flags) String() string {
	return proto.EnumName(Key_Flags_name, int32(x))
}

func (x *Key_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Key_Flags_value, data, "Key_Flags")
	if err != nil {
		return err
	}
	*x = Key_Flags(value)
	return nil
}

func (Key_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{2, 0}
}

type AndroidSpec_Flags int32

const (
	AndroidSpec_CERTS_CHECK AndroidSpec_Flags = 1
	AndroidSpec_PKGS_CHECK  AndroidSpec_Flags = 2
	AndroidSpec_ALL_CHECK   AndroidSpec_Flags = 65535
)

var AndroidSpec_Flags_name = map[int32]string{
	1:     "CERTS_CHECK",
	2:     "PKGS_CHECK",
	65535: "ALL_CHECK",
}

var AndroidSpec_Flags_value = map[string]int32{
	"CERTS_CHECK": 1,
	"PKGS_CHECK":  2,
	"ALL_CHECK":   65535,
}

func (x AndroidSpec_Flags) Enum() *AndroidSpec_Flags {
	p := new(AndroidSpec_Flags)
	*p = x
	return p
}

func (x AndroidSpec_Flags) String() string {
	return proto.EnumName(AndroidSpec_Flags_name, int32(x))
}

func (x *AndroidSpec_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AndroidSpec_Flags_value, data, "AndroidSpec_Flags")
	if err != nil {
		return err
	}
	*x = AndroidSpec_Flags(value)
	return nil
}

func (AndroidSpec_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{3, 0}
}

type IOSSpec_Flags int32

const (
	IOSSpec_PKGS_CHECK IOSSpec_Flags = 1
	IOSSpec_ALL_CHECK  IOSSpec_Flags = 65535
)

var IOSSpec_Flags_name = map[int32]string{
	1:     "PKGS_CHECK",
	65535: "ALL_CHECK",
}

var IOSSpec_Flags_value = map[string]int32{
	"PKGS_CHECK": 1,
	"ALL_CHECK":  65535,
}

func (x IOSSpec_Flags) Enum() *IOSSpec_Flags {
	p := new(IOSSpec_Flags)
	*p = x
	return p
}

func (x IOSSpec_Flags) String() string {
	return proto.EnumName(IOSSpec_Flags_name, int32(x))
}

func (x *IOSSpec_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IOSSpec_Flags_value, data, "IOSSpec_Flags")
	if err != nil {
		return err
	}
	*x = IOSSpec_Flags(value)
	return nil
}

func (IOSSpec_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{4, 0}
}

type License struct {
	Product         *string          `protobuf:"bytes,1,req,name=product" json:"product,omitempty"`
	Version         *string          `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Expires         *string          `protobuf:"bytes,3,opt,name=expires" json:"expires,omitempty"`
	User            *string          `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Id              *string          `protobuf:"bytes,5,req,name=id" json:"id,omitempty"`
	AesKey          []byte           `protobuf:"bytes,6,req,name=aes_key,json=aesKey" json:"aes_key,omitempty"`
	Features        []string         `protobuf:"bytes,7,rep,name=features" json:"features,omitempty"`
	Branch          *License_Branch  `protobuf:"varint,8,req,name=branch,enum=com.dingxiang.mobile.License_Branch" json:"branch,omitempty"`
	Info            *string          `protobuf:"bytes,9,req,name=info" json:"info,omitempty"`
	Keys            []*Key           `protobuf:"bytes,10,rep,name=keys" json:"keys,omitempty"`
	ConstidServer   *string          `protobuf:"bytes,11,opt,name=constid_server,json=constidServer" json:"constid_server,omitempty"`
	SteeCloudServer *SteeCloudServer `protobuf:"bytes,12,opt,name=stee_cloud_server,json=steeCloudServer" json:"stee_cloud_server,omitempty"`
	Android         *AndroidSpec     `protobuf:"bytes,13,opt,name=android" json:"android,omitempty"`
	Appkey          *string          `protobuf:"bytes,14,opt,name=appkey" json:"appkey,omitempty"`
	Appsecurity     []byte           `protobuf:"bytes,15,opt,name=appsecurity" json:"appsecurity,omitempty"`
	//urls
	FeedbackServer       *string  `protobuf:"bytes,16,opt,name=feedback_server,json=feedbackServer" json:"feedback_server,omitempty"`
	IOS                  *IOSSpec `protobuf:"bytes,17,opt,name=iOS" json:"iOS,omitempty"`
	AntiFlags            *uint32  `protobuf:"varint,18,opt,name=anti_flags,json=antiFlags" json:"anti_flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *License) Reset()         { *m = License{} }
func (m *License) String() string { return proto.CompactTextString(m) }
func (*License) ProtoMessage()    {}
func (*License) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{0}
}

func (m *License) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_License.Unmarshal(m, b)
}
func (m *License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_License.Marshal(b, m, deterministic)
}
func (m *License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_License.Merge(m, src)
}
func (m *License) XXX_Size() int {
	return xxx_messageInfo_License.Size(m)
}
func (m *License) XXX_DiscardUnknown() {
	xxx_messageInfo_License.DiscardUnknown(m)
}

var xxx_messageInfo_License proto.InternalMessageInfo

func (m *License) GetProduct() string {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return ""
}

func (m *License) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *License) GetExpires() string {
	if m != nil && m.Expires != nil {
		return *m.Expires
	}
	return ""
}

func (m *License) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *License) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *License) GetAesKey() []byte {
	if m != nil {
		return m.AesKey
	}
	return nil
}

func (m *License) GetFeatures() []string {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *License) GetBranch() License_Branch {
	if m != nil && m.Branch != nil {
		return *m.Branch
	}
	return License_TRAIL
}

func (m *License) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

func (m *License) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *License) GetConstidServer() string {
	if m != nil && m.ConstidServer != nil {
		return *m.ConstidServer
	}
	return ""
}

func (m *License) GetSteeCloudServer() *SteeCloudServer {
	if m != nil {
		return m.SteeCloudServer
	}
	return nil
}

func (m *License) GetAndroid() *AndroidSpec {
	if m != nil {
		return m.Android
	}
	return nil
}

func (m *License) GetAppkey() string {
	if m != nil && m.Appkey != nil {
		return *m.Appkey
	}
	return ""
}

func (m *License) GetAppsecurity() []byte {
	if m != nil {
		return m.Appsecurity
	}
	return nil
}

func (m *License) GetFeedbackServer() string {
	if m != nil && m.FeedbackServer != nil {
		return *m.FeedbackServer
	}
	return ""
}

func (m *License) GetIOS() *IOSSpec {
	if m != nil {
		return m.IOS
	}
	return nil
}

func (m *License) GetAntiFlags() uint32 {
	if m != nil && m.AntiFlags != nil {
		return *m.AntiFlags
	}
	return 0
}

type SteeCloudServer struct {
	Baseurl              *string  `protobuf:"bytes,1,opt,name=baseurl" json:"baseurl,omitempty"`
	Checkin              *string  `protobuf:"bytes,2,opt,name=checkin" json:"checkin,omitempty"`
	Fetch                *string  `protobuf:"bytes,3,opt,name=fetch" json:"fetch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteeCloudServer) Reset()         { *m = SteeCloudServer{} }
func (m *SteeCloudServer) String() string { return proto.CompactTextString(m) }
func (*SteeCloudServer) ProtoMessage()    {}
func (*SteeCloudServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{1}
}

func (m *SteeCloudServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteeCloudServer.Unmarshal(m, b)
}
func (m *SteeCloudServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteeCloudServer.Marshal(b, m, deterministic)
}
func (m *SteeCloudServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteeCloudServer.Merge(m, src)
}
func (m *SteeCloudServer) XXX_Size() int {
	return xxx_messageInfo_SteeCloudServer.Size(m)
}
func (m *SteeCloudServer) XXX_DiscardUnknown() {
	xxx_messageInfo_SteeCloudServer.DiscardUnknown(m)
}

var xxx_messageInfo_SteeCloudServer proto.InternalMessageInfo

func (m *SteeCloudServer) GetBaseurl() string {
	if m != nil && m.Baseurl != nil {
		return *m.Baseurl
	}
	return ""
}

func (m *SteeCloudServer) GetCheckin() string {
	if m != nil && m.Checkin != nil {
		return *m.Checkin
	}
	return ""
}

func (m *SteeCloudServer) GetFetch() string {
	if m != nil && m.Fetch != nil {
		return *m.Fetch
	}
	return ""
}

type Key struct {
	Flags                *uint32  `protobuf:"varint,1,req,name=flags" json:"flags,omitempty"`
	Alg                  *string  `protobuf:"bytes,2,req,name=alg" json:"alg,omitempty"`
	Name                 *string  `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Encoded              []byte   `protobuf:"bytes,4,opt,name=encoded" json:"encoded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{2}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *Key) GetAlg() string {
	if m != nil && m.Alg != nil {
		return *m.Alg
	}
	return ""
}

func (m *Key) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Key) GetEncoded() []byte {
	if m != nil {
		return m.Encoded
	}
	return nil
}

type AndroidSpec struct {
	Flags                *uint32  `protobuf:"varint,1,req,name=flags" json:"flags,omitempty"`
	Certs                [][]byte `protobuf:"bytes,2,rep,name=certs" json:"certs,omitempty"`
	Pkgs                 []string `protobuf:"bytes,3,rep,name=pkgs" json:"pkgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AndroidSpec) Reset()         { *m = AndroidSpec{} }
func (m *AndroidSpec) String() string { return proto.CompactTextString(m) }
func (*AndroidSpec) ProtoMessage()    {}
func (*AndroidSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{3}
}

func (m *AndroidSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AndroidSpec.Unmarshal(m, b)
}
func (m *AndroidSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AndroidSpec.Marshal(b, m, deterministic)
}
func (m *AndroidSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AndroidSpec.Merge(m, src)
}
func (m *AndroidSpec) XXX_Size() int {
	return xxx_messageInfo_AndroidSpec.Size(m)
}
func (m *AndroidSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AndroidSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AndroidSpec proto.InternalMessageInfo

func (m *AndroidSpec) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *AndroidSpec) GetCerts() [][]byte {
	if m != nil {
		return m.Certs
	}
	return nil
}

func (m *AndroidSpec) GetPkgs() []string {
	if m != nil {
		return m.Pkgs
	}
	return nil
}

type IOSSpec struct {
	Flags                *uint32  `protobuf:"varint,1,req,name=flags" json:"flags,omitempty"`
	Pkgs                 []string `protobuf:"bytes,2,rep,name=pkgs" json:"pkgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IOSSpec) Reset()         { *m = IOSSpec{} }
func (m *IOSSpec) String() string { return proto.CompactTextString(m) }
func (*IOSSpec) ProtoMessage()    {}
func (*IOSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d5260027cbd2de, []int{4}
}

func (m *IOSSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IOSSpec.Unmarshal(m, b)
}
func (m *IOSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IOSSpec.Marshal(b, m, deterministic)
}
func (m *IOSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IOSSpec.Merge(m, src)
}
func (m *IOSSpec) XXX_Size() int {
	return xxx_messageInfo_IOSSpec.Size(m)
}
func (m *IOSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_IOSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_IOSSpec proto.InternalMessageInfo

func (m *IOSSpec) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *IOSSpec) GetPkgs() []string {
	if m != nil {
		return m.Pkgs
	}
	return nil
}

func init() {
	proto.RegisterEnum("com.dingxiang.mobile.License_Branch", License_Branch_name, License_Branch_value)
	proto.RegisterEnum("com.dingxiang.mobile.License_AntiFlag", License_AntiFlag_name, License_AntiFlag_value)
	proto.RegisterEnum("com.dingxiang.mobile.Key_Flags", Key_Flags_name, Key_Flags_value)
	proto.RegisterEnum("com.dingxiang.mobile.AndroidSpec_Flags", AndroidSpec_Flags_name, AndroidSpec_Flags_value)
	proto.RegisterEnum("com.dingxiang.mobile.IOSSpec_Flags", IOSSpec_Flags_name, IOSSpec_Flags_value)
	proto.RegisterType((*License)(nil), "com.dingxiang.mobile.License")
	proto.RegisterType((*SteeCloudServer)(nil), "com.dingxiang.mobile.SteeCloudServer")
	proto.RegisterType((*Key)(nil), "com.dingxiang.mobile.Key")
	proto.RegisterType((*AndroidSpec)(nil), "com.dingxiang.mobile.AndroidSpec")
	proto.RegisterType((*IOSSpec)(nil), "com.dingxiang.mobile.iOSSpec")
}

func init() { proto.RegisterFile("stee_license_sdk_keys.proto", fileDescriptor_27d5260027cbd2de) }

var fileDescriptor_27d5260027cbd2de = []byte{
	// 790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x8f, 0xe3, 0x44,
	0x10, 0xc5, 0x76, 0x3e, 0x2b, 0x5f, 0x3d, 0xa5, 0x11, 0x34, 0xa0, 0x95, 0x4c, 0xc4, 0x82, 0x2f,
	0x04, 0x69, 0x6e, 0x08, 0x0e, 0x64, 0x33, 0xd9, 0x65, 0x34, 0xd1, 0xcc, 0xd0, 0x19, 0xad, 0xb4,
	0x42, 0x28, 0xea, 0xd8, 0x95, 0x4c, 0x6f, 0x1c, 0xdb, 0xf2, 0xc7, 0x6a, 0x72, 0xe3, 0xc8, 0xbf,
	0xe0, 0xc8, 0xaf, 0xe3, 0x37, 0x2c, 0xea, 0xb6, 0x1d, 0xcd, 0x42, 0xf6, 0xd6, 0xef, 0x55, 0x75,
	0xd5, 0xab, 0x2e, 0x3f, 0xc3, 0x97, 0x59, 0x4e, 0xb4, 0x0a, 0x95, 0x4f, 0x51, 0x46, 0xab, 0x2c,
	0xd8, 0xad, 0x76, 0x74, 0xc8, 0x26, 0x49, 0x1a, 0xe7, 0x31, 0x9e, 0xfb, 0xf1, 0x7e, 0x12, 0xa8,
	0x68, 0xfb, 0xa8, 0x64, 0xb4, 0x9d, 0xec, 0xe3, 0xb5, 0x0a, 0x69, 0xfc, 0x4f, 0x0b, 0xda, 0x8b,
	0xf2, 0x02, 0x72, 0x68, 0x27, 0x69, 0x1c, 0x14, 0x7e, 0xce, 0x2d, 0xd7, 0xf6, 0xba, 0xa2, 0x86,
	0x3a, 0xf2, 0x8e, 0xd2, 0x4c, 0xc5, 0x11, 0xb7, 0x5d, 0x4b, 0x47, 0x2a, 0xa8, 0x23, 0xf4, 0x98,
	0xa8, 0x94, 0x32, 0xee, 0x94, 0x91, 0x0a, 0x22, 0x42, 0xa3, 0xc8, 0x28, 0xe5, 0x0d, 0x43, 0x9b,
	0x33, 0x0e, 0xc1, 0x56, 0x01, 0x6f, 0x9a, 0xe2, 0xb6, 0x0a, 0xf0, 0x33, 0x68, 0x4b, 0xca, 0xb4,
	0x4a, 0xde, 0x72, 0x6d, 0xaf, 0x2f, 0x5a, 0x92, 0xb2, 0x6b, 0x3a, 0xe0, 0x17, 0xd0, 0xd9, 0x90,
	0xcc, 0x0b, 0x5d, 0xb7, 0xed, 0x3a, 0x5e, 0x57, 0x1c, 0x31, 0xfe, 0x04, 0xad, 0x75, 0x2a, 0x23,
	0xff, 0x81, 0x77, 0x5c, 0xdb, 0x1b, 0x5e, 0x7c, 0x3d, 0x39, 0x35, 0xd9, 0xa4, 0x9a, 0x6a, 0xf2,
	0xc2, 0xe4, 0x8a, 0xea, 0x8e, 0x96, 0xa5, 0xa2, 0x4d, 0xcc, 0xbb, 0x46, 0x84, 0x39, 0xe3, 0x77,
	0xd0, 0xd0, 0x0f, 0xc5, 0xc1, 0x75, 0xbc, 0xde, 0xc5, 0xe7, 0xa7, 0xeb, 0x5d, 0xd3, 0x41, 0x98,
	0x34, 0x7c, 0x0e, 0x43, 0x3f, 0x8e, 0xb2, 0x5c, 0x05, 0xab, 0x8c, 0xd2, 0x77, 0x94, 0xf2, 0x9e,
	0x99, 0x71, 0x50, 0xb1, 0x4b, 0x43, 0xe2, 0xaf, 0x70, 0x66, 0xf6, 0xe1, 0x87, 0x71, 0x71, 0xcc,
	0xec, 0xbb, 0x96, 0xd7, 0xbb, 0x78, 0x7e, 0xba, 0xc5, 0x32, 0x27, 0x9a, 0xe9, 0xec, 0xb2, 0x82,
	0x18, 0x65, 0x1f, 0x12, 0xf8, 0x23, 0xb4, 0x65, 0x14, 0xa4, 0xb1, 0x0a, 0xf8, 0xc0, 0x14, 0xfa,
	0xea, 0x74, 0xa1, 0x69, 0x99, 0xb4, 0x4c, 0xc8, 0x17, 0xf5, 0x0d, 0xfc, 0x14, 0x5a, 0x32, 0x49,
	0xf4, 0x5b, 0x0f, 0x8d, 0xdc, 0x0a, 0xa1, 0x0b, 0x3d, 0x99, 0x24, 0x19, 0xf9, 0x45, 0xaa, 0xf2,
	0x03, 0x1f, 0xb9, 0x96, 0xd7, 0x17, 0x4f, 0x29, 0xfc, 0x16, 0x46, 0x1b, 0xa2, 0x60, 0x2d, 0xfd,
	0x5d, 0x3d, 0x07, 0x33, 0x25, 0x86, 0x35, 0x5d, 0xe9, 0xfb, 0x1e, 0x1c, 0x75, 0xbb, 0xe4, 0x67,
	0x46, 0xdb, 0xb3, 0xd3, 0xda, 0xd4, 0xed, 0xd2, 0xe8, 0xd2, 0x99, 0xf8, 0x0c, 0x40, 0x46, 0xb9,
	0x5a, 0x6d, 0x42, 0xb9, 0xcd, 0x38, 0xba, 0x96, 0x37, 0x10, 0x5d, 0xcd, 0xbc, 0xd4, 0xc4, 0xf8,
	0x1b, 0x68, 0x95, 0xeb, 0xc3, 0x2e, 0x34, 0xef, 0xc5, 0xf4, 0x6a, 0xc1, 0x3e, 0xc1, 0x0e, 0x34,
	0xee, 0xc4, 0xed, 0x25, 0xb3, 0xb0, 0x0d, 0xce, 0xe5, 0xfc, 0x35, 0xb3, 0xc7, 0x7f, 0x5b, 0xd0,
	0x99, 0x56, 0xb7, 0x70, 0x08, 0x30, 0xbd, 0xb9, 0xbf, 0x5a, 0x05, 0xb4, 0x2e, 0xb6, 0xcc, 0xc2,
	0x33, 0x18, 0x18, 0x4c, 0xfb, 0x22, 0x94, 0x79, 0x9c, 0x32, 0x1b, 0x07, 0xd0, 0x35, 0xd4, 0x43,
	0x1c, 0xef, 0x58, 0xe3, 0x98, 0xb1, 0x2f, 0xc2, 0x5c, 0xa5, 0x45, 0xc4, 0x3a, 0x38, 0x82, 0x9e,
	0xa1, 0x54, 0xf4, 0x96, 0xfc, 0x9c, 0x31, 0x64, 0xd0, 0x2f, 0x73, 0x68, 0x1f, 0x14, 0xfb, 0x84,
	0xb9, 0x88, 0x30, 0x34, 0xcc, 0x5b, 0xa9, 0xc2, 0x75, 0x4a, 0x72, 0xc7, 0x7e, 0xc6, 0x51, 0xd5,
	0x3b, 0x49, 0xe3, 0xc7, 0x03, 0xfb, 0xc3, 0xc2, 0x21, 0x74, 0x0c, 0x21, 0xc3, 0x90, 0xbd, 0x7f,
	0xef, 0x8c, 0x7f, 0x83, 0xd1, 0x7f, 0xb6, 0xac, 0x2d, 0xb4, 0x96, 0x19, 0x15, 0x69, 0xc8, 0xad,
	0xd2, 0x42, 0x15, 0xd4, 0x11, 0xff, 0x81, 0xfc, 0x9d, 0x3a, 0xda, 0xae, 0x82, 0x78, 0x0e, 0xcd,
	0x0d, 0xe5, 0xfe, 0x43, 0x65, 0xba, 0x12, 0x8c, 0xff, 0xb2, 0xc0, 0xd1, 0xee, 0xd1, 0x51, 0xf3,
	0xa0, 0xda, 0xc6, 0x03, 0x51, 0x02, 0x64, 0xe0, 0xc8, 0x70, 0xcb, 0x6d, 0xf3, 0xe1, 0xeb, 0xa3,
	0xf6, 0x42, 0x24, 0xf7, 0xc4, 0x9d, 0xd2, 0x0b, 0xfa, 0x6c, 0x0c, 0x1d, 0xf9, 0x71, 0x40, 0x81,
	0x71, 0x6e, 0x5f, 0xd4, 0x70, 0xfc, 0x02, 0x9a, 0x66, 0x2b, 0x7a, 0x01, 0xcb, 0xab, 0x57, 0x37,
	0xcc, 0x42, 0x80, 0xd6, 0xeb, 0xb9, 0xb8, 0x7a, 0xf9, 0x86, 0xd9, 0xd8, 0x83, 0xf6, 0xfc, 0x66,
	0x26, 0xde, 0xdc, 0xdd, 0xb3, 0x86, 0x06, 0x97, 0xf3, 0x12, 0x74, 0xb0, 0x0b, 0xce, 0x74, 0xb1,
	0x30, 0xe3, 0xff, 0x69, 0x41, 0xef, 0xc9, 0xc7, 0xf9, 0x11, 0xa5, 0xe7, 0xd0, 0xf4, 0x29, 0xcd,
	0x33, 0x6e, 0xbb, 0x8e, 0xd7, 0x17, 0x25, 0xd0, 0x6a, 0x93, 0xdd, 0x56, 0xff, 0x67, 0xf4, 0xff,
	0xc0, 0x9c, 0xc7, 0x3f, 0xd4, 0x9a, 0x46, 0xd0, 0x9b, 0xcd, 0xc5, 0xfd, 0x72, 0x35, 0xfb, 0x65,
	0x3e, 0xbb, 0x66, 0xfa, 0xe1, 0xe1, 0xee, 0xfa, 0x55, 0x8d, 0x6d, 0x1c, 0x41, 0x77, 0xba, 0x58,
	0x54, 0x50, 0x4b, 0xf9, 0x1d, 0xda, 0xd5, 0xa7, 0xf8, 0x11, 0x15, 0x75, 0x3f, 0xfb, 0x49, 0x3f,
	0xaf, 0xee, 0xf7, 0x61, 0x79, 0xeb, 0x7f, 0xe5, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xda, 0x99,
	0xc5, 0x8b, 0x8c, 0x05, 0x00, 0x00,
}
